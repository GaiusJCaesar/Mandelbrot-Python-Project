%matplotlib inline # this may need to be commented out if you are using an IDE, like PyCharm, rather than a kernal, like CoCalc.

# IMPORT AREA

import numpy as np
import matplotlib.pyplot as plt
from numpy import newaxis

# ASSISTING FUNCTIONS

def mandel(xvals, yvals, Threshold):
    '''Input:
    xvals; numpy.float64 x co-ordinate, 
    yvals; numpy.float64 y co-ordinate, 
    Threshold; a positive number, recommended 2,
    Output: a matrix of maximum iterations for each x and y value.,
    This assists the iteration for the mandelbrot plot for each value of x and y within the threshold.'''
    # preliminary tests
    assert isinstance(xvals, np.float64), 'xvals and yvals must be nuppy floats 64 bit.'
    assert isinstance(yvals, np.float64), 'xvals and yvals must be nuppy floats 64 bit.'
    assert isinstance(Threshold, (int, float)), 'Threshold must be a number.'
    assert Threshold>0, 'Threshold must be more than 0.'
    # iteration
    max_iteration=50
    c=complex(xvals, yvals)
    z=complex(0,0)

    for i in range(max_iteration):
        z = z*z + c
        if (z.real*z.real + z.imag*z.imag)>=Threshold*Threshold:
            return i
    return max_iteration

def julia(xvals, yvals, c, Threshold):
    '''Input:
    xvals; numpy.float64 x co-ordinate, 
    yvals; numpy.float64 y co-ordinate, 
    c; a complex number, in the form of [x + yj] or complex(x, y), where x and y are numbers,
    Threshold; a positive number, recommended 2,
    Output: a matrix of maximum iterations for each x and y value.,
    This assists the iteration for the julia plot for each value of x and y within the threshold for a fixed c.'''
    # preliminary tests
    assert isinstance(xvals, np.float64), 'xvals and yvals must be nuppy floats 64 bit.'
    assert isinstance(yvals, np.float64), 'xvals and yvals must be nuppy floats 64 bit.'
    assert isinstance(Threshold, (int, float)), 'Threshold must be a number.'
    assert isinstance(c, complex), 'c must be a compelx number, in the form of [x+yj] or complex(x, y)'
    assert Threshold>0, 'Threshold must be more than 0.'
    # iteration
    max_iteration=50
    z=complex(xvals,yvals)

    for i in range(max_iteration):
        z = z*z + c
        if (z.real*z.real + z.imag*z.imag)>=Threshold*Threshold:
            return i
    return max_iteration

# NEEDED FUNCTIONS

def Julia(xvals,yvals,c,Threshold):
    '''Input:
    xvals; numpy list containing x co-ordinates, 
    yvals; numpy list containing y co-ordinates, 
    c; a complex number, in the form of [x + yj] or complex(x, y), where x and y are numbers,
    Threshold; a positive number, recommended 2,
    Output: Julia set plot and True if successful,
    Produces the plot for the respective Julia set for complex number c, iterated for |z|>Threshold, and returns True if successful.'''
    # preliminary tests
    if not isinstance(xvals,np.ndarray):
        print('xvals must be a real, positive, number.')
        return False
    if not isinstance(yvals,np.ndarray):
        print('yvals must be a real, positive, number.')
        return False
    if not isinstance(c,complex):
        print('c must be a compelx number, in the form of [x+yj] or complex(x, y)')
        return False
    assert isinstance(Threshold,(int, float)), 'Threshold must be a real, positive, number.'
    assert Threshold>0, 'Threshold must be more than 0.'
    # iteration
    columns = len(yvals)
    rows = len(xvals)
    result = np.zeros([rows, columns])
    for row_index, xvals in enumerate(np.linspace(-1.6, 1.6, num=rows)):
        for column_index, yvals in enumerate(np.linspace(-1.5, 1.5, num=columns)):
            result[row_index, column_index] = julia(xvals, yvals, c, Threshold)
    # plot
    string = str(c)
    plt.figure(figsize=(7,12))
    plt.imshow(result.T, extent=[-1.5, 1.5, -1.5, 1.5], interpolation='bilinear', cmap='hot')
    plt.xlabel('Real Numbers')
    plt.ylabel('Imaginary Numbers')
    plt.title("Julia Set for " + str(c))
    plt.tight_layout()
    plt.show()
    return True

def MandelBrot(xvals,yvals,Threshold):
    '''Input:
    xvals; numpy list containing x co-ordinates, 
    yvals; numpy list containing y co-ordinates, 
    Threshold; a positive number, recommended 2,
    Output: Mandelbrot set plot and True if successful,
    Produces the plot for the respective Mandelbrot set for fixed z=0, iterated for |z|>Threshold, and returns True if successful.'''
    # preliminary tests
    if not isinstance(xvals,np.ndarray):
        print('xvals must be a real, positive, number.')
        return False
    if not isinstance(yvals,np.ndarray):
        print('yvals must be a real, positive, number.')
        return False
    assert isinstance(Threshold,(int, float)), 'Threshold must be a real, positive, number.'
    assert Threshold>0, 'Threshold must be more than 0.'
    # iteration
    columns = len(yvals)
    rows = len(xvals)
    result = np.zeros([rows, columns])
    for row_index, xvals in enumerate(np.linspace(-1.6, 1.6, num=rows)):
        for column_index, yvals in enumerate(np.linspace(-1.5, 1.5, num=columns)):
            result[row_index, column_index] = mandel(xvals, yvals, Threshold)
    # plot
    plt.figure(figsize=(7,12))
    plt.imshow(result.T, extent=[-1.5, 1.5, -1.5, 1.5], interpolation='bilinear', cmap='hot')
    plt.xlabel('Real Numbers')
    plt.ylabel('Imaginary Numbers')
    plt.title("Mandelbrot Set")
    plt.tight_layout()
    plt.show()
    return True

# SIMPLIFYING FUNCTIONS

def listExample():
    '''This code is purely to list examples for values of c in the Julia set and produce Mandelbrot. Use returnExample(n) with the values given below.'''
    print('This is to list examples for values for c to see within the Julia set. Use returnExample(n) with n as a value below.')
    print('n = 1: c= -0.1+0.65j')
    print('n = 2: c= -0.7269+0.1889j')
    print('n = 3: c= -0.8+0.156j')
    print('n = 4: c= -0.41+0.6j')
    print('n = 5: c= 0.285+0.01j')
    print('n = "mandel": MandelBrot')

def returnExample(n):
    '''Input: n, a number between 1 and 6, or "mandel".
    Output: Julia set for selected n, or Mandebrot for "mandel".
    This is to choose an example of a predetermined Julia set or Mandelbrot for visual purposes.'''
    assert isinstance(n,(int, str)), 'n must be an integer.'
    if type(n)==str:
        assert n == "mandel", 'Must only accept mandel for strings'
    elif type(n)==int:
        assert n<7, 'n must be between 1 and 5.'
        assert n>0, 'n must be between 1 and 5.'
    else:
        assert False, 'Input invalid, for help use help(returnExample.)'
    julia=0
    x = np.linspace(-2, 1, 601)
    y = np.linspace(-1.5, 1.5, 401)
    if n==1:
        example=Julia(x, y, complex(-0.1, 0.65), 2)
        print("You have chosen", n,".", "Which is...")
    if n==2:
        example=Julia(x, y, complex(-0.7269, 0.1889), 2)
        print("You have chosen", n,".", "Which is...")
    if n==3:
        example=Julia(x, y, complex(-0.8, 0.156), 2)
        print("You have chosen", n,".", "Which is...")
    if n==4:
        example=Julia(x, y, complex(-0.4, 0.6), 2)
        print("You have chosen", n,".", "Which is...")
    if n==5:
        example=Julia(x, y, complex(0.285, 0.01), 2)
        print("You have chosen", n,".", "Which is...")
    if n==6:
        example=Julia(x, y, complex(-0.5, 1), 2)
        print("You have chosen", n,".", "Which is...")
    if n=="mandel":
        example=MandelBrot(x, y, 2)
    return example

def doTests():
    '''Tests the functions based on predetermined values, and returns true if successful.'''
    assert Julia(np.linspace(-2, 1, 601),np.linspace(-1.5, 1.5, 401), complex(-0.1, 0.65), 2)==True, 'This should be true.'
    assert Julia(np.linspace(-2, 1, 601), np.linspace(-1.5, 1.5, 401), complex(-0.7269, 0.1889), 2)==True, 'This should be true.'
    assert Julia(np.linspace(-2, 1, 601), np.linspace(-1.5, 1.5, 401), complex(0.285, 0.01), 2)==True, 'This should be true.'
    assert MandelBrot(np.linspace(-2, 1, 601), np.linspace(-1.5, 1.5, 401), 2)==True, 'This should be true.'
    assert mandel(np.float64(0), np.float64(0), 2)==50, 'If this is an error, check for "max_iteration within" the helper functions, and change it to 50.'
    assert julia(np.float64(0), np.float64(0), complex(-0.1, 0.65), 2)==50, 'If this is an error, check for "max_iteration within" the helper functions, and change it to 50.'
    assert Julia([-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5],[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5], complex(-0.1, 0.65), 2)==False, 'This must be false because of the lists.'
    assert MandelBrot([-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5],[-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5], 2)==False, 'This must be false because of the lists.'
    return True

# PRACTICE AREA
# remove the '#' to use any of the functions below. I recommend using the first set of x and y values using linspace because it creates 600 iterations for x and y values, creating a higher resolution image. You can also use returnExample(n) and listExample() to predetermineed values for Julia and Mandelbrot sets.

#help(Julia)
#help(MandelBrot)

x = np.linspace(-2, 1, 600)
y = np.linspace(-1.5, 1.5, 600)

#x = np.array([-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5])
#y = np.array([-2, -1.5, -1, -0.5, 0, 0.5, 1, 1.5])

MandelBrot(x, y, 2)

Julia(x, y, complex(-0.1, 0.65), 2) # n = 1 for returnExample(n)
#Julia(x, y, complex(-0.7269, 0.1889), 2) # n = 1 for returnExample(n)
#Julia(x, y, complex(-0.8, 0.156), 2) # n = 3 for returnExample(n)
#Julia(x, y, complex(-0.4, 0.6), 2) # n = 4 for returnExample(n)
#Julia(x, y, complex(0.285, 0.01), 2) # n = 5 for returnExample(n)
#Julia(x, y, complex(-0.5, 1), 2) # n = 6 for returnExample(n)

#listExample()
#returnExample(4)

#https://github.com/jupyter-widgets/ipywidgets/issues/2103
#https://scipython.com/book/chapter-7-matplotlib/problems/p72/the-julia-set/

#doTests()
